// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  password String
  name String
  role Role @default(STAFF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Client {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  phone String 
  address String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  workOrders WorkOrder[]

  @@map("clients")
}

model Part {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  serialNumber String?
  price Float
  stockQuantity Int
  supplierId String @db.ObjectId
  supplier Supplier @relation(fields: [supplierId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  workOrders WorkOrderPart[]

  @@map("parts")
}

model Supplier {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  phone String
  address String?
  parts Part[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("suppliers")
}

model Repair {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  description String
  status RepairStatus @default(PENDING)
  cost Float
  workOrderId String @db.ObjectId
  workOder WorkOrder @relation(fields: [workOrderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("repairs")
}

model WorkOrder {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  clientId String @db.ObjectId
  client Client @relation(fields: [clientId], references: [id])
  description String
  status WorkOrderStatus @default(OPEN)
  repairs Repair[]
  parts WorkOrderPart[]
  totalCost Float @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("workorders")
}

model WorkOrderPart {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  workOrderId String @db.ObjectId
  workOrder WorkOrder @relation(fields: [workOrderId], references: [id])
  partId String @db.ObjectId
  part Part @relation(fields: [partId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("workorder_parts")
}

enum Role {
  ADMIN
  STAFF
}

enum RepairStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum WorkOrderStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}